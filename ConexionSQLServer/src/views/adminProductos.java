/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import conexionsqlserver.Validations;
import conexionsqlserver.storedProcedures;
import conexionsqlserver.temporalVariables;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

/**
 *
 * @author JoséFrancisco
 */
public class adminProductos extends javax.swing.JInternalFrame {
    
    static ResultSet res;
    public static int cod = 0;

    public static int getCod() {
        return cod;
    }

    public static void setCod(int cod) {
        adminProductos.cod = cod;
    }
    /**
     * Creates new form adminProductos
     */
    
    public void showProdBaja(){
        DefaultTableModel marca = (DefaultTableModel) tableBajaProd.getModel();
        marca.setRowCount(0);
        res = conexionsqlserver.ConnectionDB.Query(
            "SELECT * FROM producto where producto.activo="+0+" order by nombre_producto"
        );
        
        try{
            while(res.next()){
                Vector v = new Vector();
                v.add(res.getInt("cod_producto"));
                v.add(res.getString("nombre_producto"));
                marca.addRow(v);
                tableBajaProd.setModel(marca);
            }
        }
        catch(SQLException e){
        }
    }
    
    public void showMarcasItem(){
        res = conexionsqlserver.ConnectionDB.Query( "SELECT * FROM marca where marca.activo="+1+" order by nombre_marca" );
        
        try{
            while(res.next()){
                comboMarcas.addItem(res.getString("nombre_marca"));
            }
        }
        catch(SQLException e){
        }
    }
    
    public void showProd(){
        DefaultTableModel prod = (DefaultTableModel) tableProd.getModel();
        prod.setRowCount(0);
        res = conexionsqlserver.ConnectionDB.Query(
            "SELECT * FROM producto"
          + " inner join producto_departamento on producto.cod_producto=producto_departamento.cod_producto"
          + " inner join departamento on producto_departamento.cod_departamento=departamento.cod_departamento"
          + " inner join marca_producto on producto.cod_producto=marca_producto.cod_producto"
          + " inner join marca on marca_producto.cod_marca=marca.cod_marca"
          + " inner join modelo_producto on producto.cod_producto=modelo_producto.cod_producto"
          + " inner join modelo on modelo_producto.cod_modelo=modelo.cod_modelo"
          + " inner join color_producto on producto.cod_producto=color_producto.cod_producto"
          + " inner join color on color_producto.cod_color=color.cod_color"
          + " where producto.activo="+1+" order by nombre_producto"
        );
        
        try{
            while(res.next()){
                Vector v = new Vector();
                v.add(res.getInt("cod_producto"));
                v.add(res.getString("nombre_producto"));
                v.add(res.getString("nombre_marca"));
                v.add(res.getString("nombre_modelo"));
                v.add(res.getString("nombre_color"));
                v.add(res.getFloat("precio_producto"));
                v.add(res.getInt("cantidad_producto"));
                v.add(res.getString("descripcion_producto"));
                v.add(res.getString("nombre_departamento"));
                prod.addRow(v);
                tableProd.setModel(prod);
            }
        }
        catch(SQLException e){
        }
    }
    
    
    public adminProductos() {
        initComponents();
        showProd();
        showProdBaja();
        showMarcasItem();
        txtDepartamento.setText(temporalVariables.getDepartamento());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtModelo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtColor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        txtDesc = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtDepartamento = new javax.swing.JTextField();
        comboMarcas = new javax.swing.JComboBox<>();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProd = new javax.swing.JTable();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBajaProd = new javax.swing.JTable();
        btnHabilMarca = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Productos");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Administración de productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Emoji", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        btnSave.setBackground(new java.awt.Color(255, 51, 51));
        btnSave.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(250, 250, 250));
        btnSave.setText("Guardar");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setEnabled(false);
        btnSave.setPreferredSize(new java.awt.Dimension(200, 30));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(250, 250, 250));
        btnDelete.setText("Eliminar");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setEnabled(false);
        btnDelete.setPreferredSize(new java.awt.Dimension(200, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtModelo.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtModelo.setForeground(new java.awt.Color(51, 51, 51));
        txtModelo.setEnabled(false);
        txtModelo.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Cantidad");

        txtPrecio.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtPrecio.setForeground(new java.awt.Color(51, 51, 51));
        txtPrecio.setEnabled(false);
        txtPrecio.setPreferredSize(new java.awt.Dimension(200, 25));

        txtColor.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtColor.setForeground(new java.awt.Color(51, 51, 51));
        txtColor.setEnabled(false);
        txtColor.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Color");

        btnUpdate.setBackground(new java.awt.Color(255, 51, 51));
        btnUpdate.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(250, 250, 250));
        btnUpdate.setText("Actualizar");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setEnabled(false);
        btnUpdate.setPreferredSize(new java.awt.Dimension(200, 30));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtDesc.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtDesc.setForeground(new java.awt.Color(51, 51, 51));
        txtDesc.setEnabled(false);
        txtDesc.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Precio");

        txtCantidad.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtCantidad.setForeground(new java.awt.Color(51, 51, 51));
        txtCantidad.setEnabled(false);
        txtCantidad.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Nombre");

        jLabel4.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Descripción");

        btnNew.setBackground(new java.awt.Color(255, 51, 51));
        btnNew.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        btnNew.setForeground(new java.awt.Color(250, 250, 250));
        btnNew.setText("Nuevo");
        btnNew.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNew.setPreferredSize(new java.awt.Dimension(90, 30));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        txtNombre.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(51, 51, 51));
        txtNombre.setEnabled(false);
        txtNombre.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel5.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Modelo");

        jLabel7.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Marca");

        btnCancel.setBackground(new java.awt.Color(255, 51, 51));
        btnCancel.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(250, 250, 250));
        btnCancel.setText("Cancelar");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setEnabled(false);
        btnCancel.setPreferredSize(new java.awt.Dimension(65, 30));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Departamento");

        txtDepartamento.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        txtDepartamento.setForeground(new java.awt.Color(51, 51, 51));
        txtDepartamento.setEnabled(false);
        txtDepartamento.setPreferredSize(new java.awt.Dimension(200, 25));

        comboMarcas.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        comboMarcas.setForeground(new java.awt.Color(51, 51, 51));
        comboMarcas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una marca.." }));
        comboMarcas.setEnabled(false);

        jLayeredPane1.setLayer(btnSave, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnDelete, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtModelo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtPrecio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtColor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtDesc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jSeparator1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtCantidad, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnNew, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtNombre, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnCancel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtDepartamento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(comboMarcas, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtModelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDepartamento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(comboMarcas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboMarcas, txtDepartamento, txtNombre});

        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboMarcas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLayeredPane1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDelete, btnSave, btnUpdate});

        jLayeredPane1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboMarcas, txtDepartamento, txtNombre});

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos en existencia", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Emoji", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N
        jLayeredPane2.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        tableProd.setFont(new java.awt.Font("Segoe UI Emoji", 0, 16)); // NOI18N
        tableProd.setForeground(new java.awt.Color(102, 102, 102));
        tableProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Marca", "Modelo", "Color", "Precio $", "Cantidad", "Descripción", "Departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableProd.setRowHeight(35);
        tableProd.setRowMargin(5);
        tableProd.setShowVerticalLines(false);
        tableProd.getTableHeader().setReorderingAllowed(false);
        tableProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProdMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProd);
        if (tableProd.getColumnModel().getColumnCount() > 0) {
            tableProd.getColumnModel().getColumn(0).setMinWidth(0);
            tableProd.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableProd.getColumnModel().getColumn(0).setMaxWidth(0);
            tableProd.getColumnModel().getColumn(5).setMinWidth(70);
            tableProd.getColumnModel().getColumn(5).setPreferredWidth(70);
            tableProd.getColumnModel().getColumn(5).setMaxWidth(70);
            tableProd.getColumnModel().getColumn(6).setMinWidth(70);
            tableProd.getColumnModel().getColumn(6).setPreferredWidth(70);
            tableProd.getColumnModel().getColumn(6).setMaxWidth(70);
            tableProd.getColumnModel().getColumn(8).setMinWidth(0);
            tableProd.getColumnModel().getColumn(8).setPreferredWidth(0);
            tableProd.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        jLayeredPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos dados de baja administrativamente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Light", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        tableBajaProd.setFont(new java.awt.Font("Segoe UI Emoji", 0, 16)); // NOI18N
        tableBajaProd.setForeground(new java.awt.Color(102, 102, 102));
        tableBajaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "codigo", "Producto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBajaProd.setRowHeight(35);
        tableBajaProd.setRowMargin(5);
        tableBajaProd.setShowVerticalLines(false);
        tableBajaProd.getTableHeader().setReorderingAllowed(false);
        tableBajaProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBajaProdMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableBajaProd);
        if (tableBajaProd.getColumnModel().getColumnCount() > 0) {
            tableBajaProd.getColumnModel().getColumn(0).setMinWidth(0);
            tableBajaProd.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableBajaProd.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnHabilMarca.setBackground(new java.awt.Color(255, 51, 51));
        btnHabilMarca.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        btnHabilMarca.setForeground(new java.awt.Color(240, 240, 240));
        btnHabilMarca.setText("Habilitar");
        btnHabilMarca.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHabilMarca.setEnabled(false);
        btnHabilMarca.setPreferredSize(new java.awt.Dimension(71, 25));
        btnHabilMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHabilMarcaActionPerformed(evt);
            }
        });

        jLayeredPane3.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(btnHabilMarca, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnHabilMarca, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addGap(60, 60, 60))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHabilMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLayeredPane2)
                .addGap(10, 10, 10)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane3)
                    .addComponent(jLayeredPane2)
                    .addComponent(jLayeredPane1))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String nombre = txtNombre.getText();
        String modelo = txtModelo.getText();
        String color  = txtColor.getText();
        String desc   = txtDesc.getText();
        
        if( nombre.isEmpty() || modelo.isEmpty() || color.isEmpty() || txtPrecio.getText().isEmpty() || txtCantidad.getText().isEmpty() ){
            JOptionPane.showMessageDialog(null, "Completa los campos requeridos(todos excepto la descripcion)", "Adertencia", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if( Validations.validarNombres(nombre) || Validations.validarNombres(color) || Validations.validarFloat(txtPrecio.getText()) || Validations.validarNumeros(txtCantidad.getText()) ){
                JOptionPane.showMessageDialog(null, "Introduce valores correctos!!" , "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if( comboMarcas.getSelectedIndex() == 0 ){
                JOptionPane.showMessageDialog(null, "Selecciona una marca","Error",JOptionPane.ERROR_MESSAGE);
                comboMarcas.requestFocus();
            }
            else if( Validations.lenght(nombre, 30) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 30 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
            }
            else if( Validations.lenght(modelo, 20) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 20 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtModelo.requestFocus();
            }
            else if( Validations.lenght(color, 20) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 20 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtColor.requestFocus();
            }
            else if( Validations.lenght(txtPrecio.getText(), 53) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 53 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtPrecio.requestFocus();
            }
            else if( Validations.lenght(txtCantidad.getText(), 5) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 5 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
            }
            else if( Validations.lenght(desc, 50) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 50 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtDesc.requestFocus();
            }
            else{
                float precio  = Float.parseFloat(txtPrecio.getText());
                int cantidad  = Integer.parseInt(txtCantidad.getText());
                
                try{
                    
                    storedProcedures.addProducto(nombre, precio, cantidad, desc);
                    storedProcedures.addModelo(modelo);
                    storedProcedures.addColor(color);
                    
                    //int codDepa = storedProcedures.getID("cod_departamento", "departamento");
                    int codDepa = 0;
                    res = conexionsqlserver.ConnectionDB.Query("select * from departamento where nombre_departamento='"+temporalVariables.getDepartamento()+"'");
                    while( res.next() ){
                        codDepa = res.getInt("cod_departamento");
                    }
                    
                    int codProd = storedProcedures.getID("cod_producto", "producto");
                    int codMarca = storedProcedures.getIDMarca(comboMarcas.getSelectedItem().toString());
                    int codModelo = storedProcedures.getID("cod_modelo", "modelo");
                    int codColor = storedProcedures.getID("cod_color", "color");
                    
                    storedProcedures.addProd_Depa(codProd, codDepa);
                    storedProcedures.addMarca_Producto(codMarca, codProd);
                    storedProcedures.addModelo_Producto(codModelo, codProd);
                    storedProcedures.addColor_Producto(codColor, codProd);
                    
                    JOptionPane.showMessageDialog(null, "Producto almacenado exitosamente!!" , "Genial" , JOptionPane.INFORMATION_MESSAGE);
                    txtNombre.setText("");
                    comboMarcas.setSelectedIndex(0);
                    txtModelo.setText("");
                    txtColor.setText("");
                    txtPrecio.setText("");
                    txtCantidad.setText("");
                    txtDesc.setText("");
                    showProd();
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(this, "Hubo un error al almacenar el producto, intenta de nuevo", ":( FATAL!!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        btnCancel.setEnabled(false);
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        
        txtNombre.setEnabled(false);
        txtNombre.setText("");
        txtNombre.requestFocus();
        comboMarcas.setEnabled(false);
        comboMarcas.setSelectedIndex(0);
        txtModelo.setEnabled(false);
        txtModelo.setText("");
        txtColor.setEnabled(false);
        txtColor.setText("");
        txtPrecio.setEnabled(false);
        txtPrecio.setText("");
        txtCantidad.setEnabled(false);
        txtCantidad.setText("");
        txtDesc.setEnabled(false);
        txtDesc.setText("");
        tableProd.clearSelection();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        btnCancel.setEnabled(true);
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        
        txtNombre.setEnabled(true);
        txtNombre.setText("");
        txtNombre.requestFocus();
        comboMarcas.setEnabled(true);
        comboMarcas.setSelectedIndex(0);
        txtModelo.setEnabled(true);
        txtModelo.setText("");
        txtColor.setEnabled(true);
        txtColor.setText("");
        txtPrecio.setEnabled(true);
        txtPrecio.setText("");
        txtCantidad.setEnabled(true);
        txtCantidad.setText("");
        txtDesc.setEnabled(true);
        txtDesc.setText("");
        tableProd.clearSelection();
    }//GEN-LAST:event_btnNewActionPerformed

    private void tableProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProdMouseClicked
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        btnCancel.setEnabled(true);
        
        try{
            int row = tableProd.getSelectedRow();
            setCod(Integer.parseInt(tableProd.getValueAt(row, 0).toString()));
            res = conexionsqlserver.ConnectionDB.Query("SELECT * FROM producto"
                    + " inner join producto_departamento on producto.cod_producto=producto_departamento.cod_producto"
                    + " inner join departamento on producto_departamento.cod_departamento=departamento.cod_departamento"
                    + " inner join marca_producto on producto.cod_producto=marca_producto.cod_producto"
                    + " inner join marca on marca_producto.cod_marca=marca.cod_marca"
                    + " inner join modelo_producto on producto.cod_producto=modelo_producto.cod_producto"
                    + " inner join modelo on modelo_producto.cod_modelo=modelo.cod_modelo"
                    + " inner join color_producto on producto.cod_producto=color_producto.cod_producto"
                    + " inner join color on color_producto.cod_color=color.cod_color"
                    + " where producto.cod_producto="+getCod());
            while(res.next()){
                txtNombre.setEnabled(true);
                txtNombre.setText(res.getString("nombre_producto"));
                comboMarcas.setEnabled(true);
                comboMarcas.setSelectedItem(res.getString("nombre_marca"));
                txtModelo.setEnabled(true);
                txtModelo.setText(res.getString("nombre_modelo"));
                txtColor.setEnabled(true);
                txtColor.setText(res.getString("nombre_color"));
                txtPrecio.setEnabled(true);
                txtPrecio.setText(res.getString("precio_producto"));
                txtCantidad.setEnabled(true);
                txtCantidad.setText(res.getString("cantidad_producto"));
                txtDesc.setEnabled(true);
                txtDesc.setText(res.getString("descripcion_producto"));
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, "No se mostraron", "error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tableProdMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String nombre = txtNombre.getText();
        String modelo = txtModelo.getText();
        String color  = txtColor.getText();
        String desc   = txtDesc.getText();
        
        if( nombre.isEmpty() || modelo.isEmpty() || color.isEmpty() || txtPrecio.getText().isEmpty() || txtCantidad.getText().isEmpty() ){
            JOptionPane.showMessageDialog(null, "Completa los campos requeridos(todos excepto la descripcion)", "Adertencia", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if( Validations.validarNombres(nombre) || Validations.validarNombres(color) || Validations.validarFloat(txtPrecio.getText()) || Validations.validarNumeros(txtCantidad.getText()) ){
                JOptionPane.showMessageDialog(null, "Introduce valores correctos!!" , "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if( comboMarcas.getSelectedIndex() == 0 ){
                JOptionPane.showMessageDialog(null, "Selecciona una marca","Error",JOptionPane.ERROR_MESSAGE);
                comboMarcas.requestFocus();
            }
            else if( Validations.lenght(nombre, 30) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 30 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
            }
            else if( Validations.lenght(modelo, 20) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 20 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtModelo.requestFocus();
            }
            else if( Validations.lenght(color, 20) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 20 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtColor.requestFocus();
            }
            else if( Validations.lenght(txtPrecio.getText(), 53) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 53 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtPrecio.requestFocus();
            }
            else if( Validations.lenght(txtCantidad.getText(), 5) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 5 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
            }
            else if( Validations.lenght(desc, 50) ){
                JOptionPane.showMessageDialog(null, "Sólo se permiten 50 caracteres en éste camp0!!", "Error", JOptionPane.ERROR_MESSAGE);
                txtDesc.requestFocus();
            }
            else{
                float precio  = Float.parseFloat(txtPrecio.getText());
                int cantidad  = Integer.parseInt(txtCantidad.getText());
                int op = JOptionPane.showConfirmDialog(this, "¿Estás seguro de actualizar éste producto?" , "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if( op == JOptionPane.NO_OPTION ){
                    JOptionPane.showMessageDialog(null, "Acción cancelada!!", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    try{
                        storedProcedures.updateProd(getCod(), nombre, precio, cantidad, desc, modelo, color);
                        int newCodMarca = storedProcedures.getIDMarca(comboMarcas.getSelectedItem().toString());
                        storedProcedures.updateMarca_Prod(newCodMarca, getCod());
                        txtNombre.setEnabled(false);
                        txtNombre.setText("");
                        comboMarcas.setEnabled(false);
                        txtModelo.setEnabled(false);
                        txtModelo.setText("");
                        txtColor.setEnabled(false);
                        txtColor.setText("");
                        txtPrecio.setEnabled(false);
                        txtPrecio.setText("");
                        txtCantidad.setEnabled(false);
                        txtCantidad.setText("");
                        txtDesc.setEnabled(false);
                        txtDesc.setText("");
                        btnUpdate.setEnabled(false);
                        btnDelete.setEnabled(false);
                        btnSave.setEnabled(false);
                        showProd();
                    }
                    catch(SQLException e){
                        JOptionPane.showMessageDialog(this, "Hubo un error al actualizar el producto, intenta de nuevo", ":( FATAL!!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int op = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar éste producto?" , "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
        if( op == JOptionPane.NO_OPTION ){
            JOptionPane.showMessageDialog(null, "Acción cancelada!!", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            try{
                storedProcedures.deleteProducto(getCod());
                txtNombre.setEnabled(false);
                txtNombre.setText("");
                comboMarcas.setEnabled(false);
                comboMarcas.setSelectedIndex(0);
                txtModelo.setEnabled(false);
                txtModelo.setText("");
                txtColor.setEnabled(false);
                txtColor.setText("");
                txtPrecio.setEnabled(false);
                txtPrecio.setText("");
                txtCantidad.setEnabled(false);
                txtCantidad.setText("");
                txtDesc.setEnabled(false);
                txtDesc.setText("");
                btnUpdate.setEnabled(false);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Baja exitosa!!", "Genial", JOptionPane.INFORMATION_MESSAGE);
                showProd();
                showProdBaja();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(this, "Hubo un error al eliminar el producto, intenta de nuevo", ":( FATAL!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tableBajaProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBajaProdMouseClicked
        btnHabilMarca.setEnabled(true);
    }//GEN-LAST:event_tableBajaProdMouseClicked

    private void btnHabilMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHabilMarcaActionPerformed
        int row = tableBajaProd.getSelectedRow();
        int cod = Integer.parseInt(tableBajaProd.getValueAt(row, 0).toString());
        int opt = JOptionPane.showConfirmDialog(this, "¿Estás seguro de habilitar éste producto?" , "¿Confirmar?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if( opt == JOptionPane.NO_OPTION ){
            JOptionPane.showMessageDialog(null, "Proceso cancelado!!" , "Información", JOptionPane.INFORMATION_MESSAGE);
            tableBajaProd.clearSelection();
            btnHabilMarca.setEnabled(false);
        }
        else{
            try{
                storedProcedures.enableProd(cod);
                JOptionPane.showMessageDialog(null, "Producto habilitado exitosamente!!" , "Genial", JOptionPane.INFORMATION_MESSAGE);
                tableBajaProd.clearSelection();
                btnHabilMarca.setEnabled(false);
                showProdBaja();
                showProd();
            }
            catch( SQLException e ){}
        }
    }//GEN-LAST:event_btnHabilMarcaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHabilMarca;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    public javax.swing.JComboBox<String> comboMarcas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tableBajaProd;
    public javax.swing.JTable tableProd;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtDepartamento;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
